on: [push, pull_request]

name: CI

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
      - uses: docker://rust:1.64.0-slim-bullseye # Make sure the Debian release is the same as or older than the base image specified in the Dockerfile
        with:
          args: ./ci/build_and_test.bash ${{ matrix.target }} --release --locked
      - uses: actions/upload-artifact@v3
        with:
          name: kaisantantoudaijin-${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/kaisantantoudaijin
  fmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --all -- --check
  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: cargo clippy -- -D warnings
  build_container_image:
    name: Build and push container images
    runs-on: ubuntu-22.04
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      BIN_DIR: ./dist
      IMAGE_REPOSITORY: ghcr.io/coord-e/kaisantantoudaijin
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p $BIN_DIR/{amd64,arm64}
      - uses: actions/download-artifact@v3
        with:
          name: kaisantantoudaijin-x86_64-unknown-linux-gnu
          path: ${{ env.BIN_DIR }}/amd64/
      - uses: actions/download-artifact@v3
        with:
          name: kaisantantoudaijin-aarch64-unknown-linux-gnu
          path: ${{ env.BIN_DIR }}/arm64/
      - run: chmod +x $BIN_DIR/{amd64,arm64}/*
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:latest,${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}
          build-args: BIN_DIR
